// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: intent_query.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getIntentById = `-- name: GetIntentById :one
SELECT id, repository, since, created_at, is_active
FROM intents
WHERE id = $1
`

func (q *Queries) GetIntentById(ctx context.Context, id uuid.UUID) (Intent, error) {
	row := q.db.QueryRow(ctx, getIntentById, id)
	var i Intent
	err := row.Scan(
		&i.ID,
		&i.Repository,
		&i.Since,
		&i.CreatedAt,
		&i.IsActive,
	)
	return i, err
}

const getIntentByRepoName = `-- name: GetIntentByRepoName :one
SELECT id, repository, since, created_at, is_active
FROM intents
WHERE repository = $1
`

func (q *Queries) GetIntentByRepoName(ctx context.Context, repository string) (Intent, error) {
	row := q.db.QueryRow(ctx, getIntentByRepoName, repository)
	var i Intent
	err := row.Scan(
		&i.ID,
		&i.Repository,
		&i.Since,
		&i.CreatedAt,
		&i.IsActive,
	)
	return i, err
}

const getIntents = `-- name: GetIntents :many
SELECT id, repository, since, created_at, is_active 
FROM intents 
WHERE is_active = COALESCE($1, is_active)
`

func (q *Queries) GetIntents(ctx context.Context, isActive bool) ([]Intent, error) {
	rows, err := q.db.Query(ctx, getIntents, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Intent
	for rows.Next() {
		var i Intent
		if err := rows.Scan(
			&i.ID,
			&i.Repository,
			&i.Since,
			&i.CreatedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveIntent = `-- name: SaveIntent :exec
INSERT INTO intents (id, repository, since, created_at, is_active)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (id) DO UPDATE
SET repository = EXCLUDED.repository,
    since = EXCLUDED.since,
    created_at = EXCLUDED.created_at,
    is_active = EXCLUDED.is_active
`

type SaveIntentParams struct {
	ID         uuid.UUID
	Repository string
	Since      pgtype.Timestamptz
	CreatedAt  pgtype.Timestamptz
	IsActive   bool
}

func (q *Queries) SaveIntent(ctx context.Context, arg SaveIntentParams) error {
	_, err := q.db.Exec(ctx, saveIntent,
		arg.ID,
		arg.Repository,
		arg.Since,
		arg.CreatedAt,
		arg.IsActive,
	)
	return err
}

const updateIntent = `-- name: UpdateIntent :exec
UPDATE intents
SET is_active = COALESCE($2, is_active),
    since = COALESCE($3, since)
WHERE id = $1
`

type UpdateIntentParams struct {
	ID       uuid.UUID
	IsActive bool
	Since    pgtype.Timestamptz
}

func (q *Queries) UpdateIntent(ctx context.Context, arg UpdateIntentParams) error {
	_, err := q.db.Exec(ctx, updateIntent, arg.ID, arg.IsActive, arg.Since)
	return err
}
